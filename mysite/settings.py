"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

from util.check import env_var_check

env_var_check()

# Name of the container where staticfiles are saved
# Default access level is "private" unless
# PROJ_5_STORAGE_CONTAINER_NAME == PROJ_5_STORAGE_DATA_TAKEOUT_CONTAINER_NAME,
# which sets the public access to "blob" on container creation.
PROJ_5_STORAGE_CONTAINER_NAME = "prog5"
# Name of the container where data takeout json files are stored.
# Default access level is "blob"
PROJ_5_STORAGE_DATA_TAKEOUT_CONTAINER_NAME = "prog5"
PROJ_5_TAKEOUT_DIRECTORY = "takeout"

DJANGO_SUPERUSER_ID = os.getenv("DJANGO_SUPERUSER_ID")
DJANGO_SUPERUSER_USERNAME = os.getenv("DJANGO_SUPERUSER_USERNAME")

PROJ_5_STORAGE_URL = os.getenv("PROJ_5_STORAGE_URL")
PROJ_5_STORAGE_CREDENTIAL_KEY = os.getenv("PROJ_5_STORAGE_CREDENTIAL_KEY")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_ROOT = PROJ_5_STORAGE_URL + "/" + PROJ_5_STORAGE_CONTAINER_NAME + "/prog5/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'static/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('PROJ_5_DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', ]

CSRF_TRUSTED_ORIGINS = ["https://css436-prog5.azurewebsites.net", "https://prog5.azurewebsites.net"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mapnotes.apps.MapnotesConfig',
    'whitenoise.runserver_nostatic',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

SITE_ID = 4

# Redirects to homepage on sucessful login
LOGIN_REDIRECT_URL = "/"

LOGOUT_REDIRECT_URL = '/'  # new

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {  # postgres
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.getenv("PROJ_5_DB_HOST"),
        'USER': os.getenv("PROJ_5_DB_USERNAME"),
        'PASSWORD': os.getenv("PROJ_5_DB_PASSWORD"),
        'NAME': os.getenv("PROJ_5_DB_NAME"),
    }
}

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
